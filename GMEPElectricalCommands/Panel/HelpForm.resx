<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HELP_TEXTBOX.Text" xml:space="preserve">
    <value>Making New Panels
- Click the "New Panel" button to begin creating a new panel, a new window should appear.
- Enter the name of the panel and check the box if the new panel is three phase.
- Click the "Create" button when done.
- If multiple panels are to be created, leave the window open, change the name and click the "Create" button again.

Creating New Panels
- When all the panel data has been filled out, click the "Create Panel" button below the panel grid.
- Select where you would like the top right corner of the panel to be placed.
- A panel should now appear in AutoCAD.
- To create all the panels, instead click the "Create All Panels" button on the far left of the panel schedule window.

Saving Panel Data
- The panel data is saved each time the user closes the panel, pressed CTRL + S, or hits the save button
- If the document closes or AutoCAD exits while the panel schedule form is still open, the panels will attempt to save

Spaces
- Empty description cells with no breaker value results in a space.

Spares
- Empty description cells with a breaker value &gt; 3 results in spare.

Half Pole Breakers
- A semi colon in the description, phase, and breaker creates a half breaker.
- Description example: "Lighting;Existing Load".
- Phase example: "600;450".
- Breaker example: "15;15".

Single Pole Breakers
- Description name, phase wattage, and a breaker value.
- Breaker value should just be a number, do not write "20-1", write "20" instead.

Two Pole Breakers
- Row1, description name, phase wattage, and a breaker value.
- Row2, description empty, phase wattage, and a breaker value of "2".
- Breaker value should just be a number, do not write "20-2", write "20" for the first row and "2" for the second row.

Three Pole Breakers
- Row1, description name, phase wattage, and a breaker value.
- Row2, description empty, phase wattage, and an empty breaker value.
- Row3, description empty, phase wattage, and a breaker value of "3".
- Breaker value should just be a number, do not write "20-3", write "20" for the first row, nothing for the second row, and "3" for the third row.

Editing Notes
- Click the "Modify Notes" button to add or remove notes, a new window will appear with a textbox that contains one note per line.
- Remove or add lines of text within the textbox to remove or add notes to the panel.
- Use the "Quick Add" section to select a default note from the dropdown menu and then press the "Add Note" button to paste that note onto a line of the textbox above.

Applying Notes
- Select any number of description cells in the panel grid using shift + left click and ctrl + left click.
- Choose the note that you would like to apply from the dropdown of notes.
- Click the button "Apply Note" to specify which circuits the note applies to.
- The description cells will have a background color of yellow if the note has been applied.

Viewing Applied Notes
- Switch between notes in the notes dropdown menu to see which circuits have notes applied to them.
- The background color of the description cell will turn yellow if the current note has been applied to that circuit.

Removing Applied Notes
- Select any number of description cells in the panel grid using shift + left click and ctrl + left click.
- Choose the note that you would like to remove from the dropdown of notes.
- Click the button "Remove Note" to no longer apply the note to the selected circuits.

Automatic Linking Panels
- To link a subpanel to a parent panel, both panels must be created in the panel schedule window.
- In the parent panel, find the location where the subpanel is to be added and type in the description cell "panel " + *panel name* or "subpanel " + *panel name* then press enter.
- If there is room below that description cell, the 2 or 3 poles of the subpanel will be linked to the parent panel and the phase cell background color will turn green.
- Example: "panel A" or "panel 'A'" or "subpanel 'A'" to link panel 'A' to the parent panel.

Manually Linking Panels
- To link a subpanel to a parent panel, both panels must be created in the panel schedule window.
- In the parent panel, find the location where the subpanel is to be added and enter in a phase cell; "=" + *panel name* + "-" + *phase letter* (A, B, C) then deselect the cell for the link to occur.
- Example: "=EQ-A" or "=EQ-B" or "=EQ-C" to link phase A, B, and C of panel 'EQ' to three separate phases.

LCL
- Apply the LCL to a circuit the same way a note is applied.
- Once the LCL is applied, the value of that circuit will be reduced to 80% of its original load when summing up the wattages of all the circuits per phase if the "ENABLE" checkbox is checked.
- If the "AUTO" checkbox is checked, the largest of the LCL loads will be placed into the LCL @ 100% textbox.
- If the "AUTO" checkbox is not checked, the largest of the LCL loads will have to be entered manually.
- If the "ENABLE" checkbox is checked, the loads will be calculated by summing up all the phases to get the total KVA, adding the largest LCL load onto that and finding the feeder amps.

Kitchen Demand
- To apply the kitchen demand factor, click the "Modify Notes" button and find the note underneath the "Quick Add" section.
- Select the note from the dropdown menu and press the "Add Note" button, then the "Done" button or exit the window.
- Apply the kitchen demand note to description cells in the panel grid that are part of the kitchen equipment based on the code book.
- The table in the code book has rules for reducing the load of the kitchen equipment based on how many kitchen equipment circuits are on that panel.
- This rule is automatically applied when applying the note to circuits of the panel and the load of those circuits will be automatically reduced.
</value>
  </data>
</root>