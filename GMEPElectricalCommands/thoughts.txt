Here is the data converted to JSON format:

```json
{
  "panel": "B",
  "location": "BREAK ROOM",
  "bus_rating": "225A",
  "voltage1": "120",
  "voltage2": "208",  
  "phase": "1",
  "wire": "3",
  "main": "M.L.O",
  "mounting": "SURFACE",
  "subtotal_a": "3750",
  "subtotal_b": "2910",
  "subtotal_c": "0",
  "total_va": "6660",
  "lcl": "0",
  "total_other_load": "0", 
  "kva": "6.66",
  "feeder_amps": "31.25",
  "existing": "EXISTING",
  "description_left_highlights": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
  "description_right_highlights": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
  "breaker_left_highlights": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], 
  "breaker_right_highlights": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
  "description_left": ["MICROWAVE", "SPACE", "TV", "SPACE", "FAN", "SPACE", "SPARE", "SPACE", "SPARE", "SPACE", "SPARE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE"],
  "phase_a_left": [900, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  "phase_b_left": [0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  "breaker_left": ["20", "", "20", "", "20", "", "20", "", "20", "", "20", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  "circuit_left": ["1", "", "3", "", "5", "", "7", "", "9", "", "11", "", "13", "", "15", "", "17", "", "19", "", "21", "", "23", "", "25", "", "27", "", "29", "", "31", "", "33", "", "35", "", "37", "", "39", "", "41"], 
  "circuit_right": ["2", "", "4", "", "6", "", "8", "", "10", "", "12", "", "14", "", "16", "", "18", "", "20", "", "22", "", "24", "", "26", "", "28", "", "30", "", "32", "", "34", "", "36", "", "38", "", "40", "", "42"],
  "breaker_right": ["20", "", "2", "", "30", "", "2", "", "20", "", "20", "", "20", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
  "phase_a_right": [250, 0, 0, 0, 2300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  "phase_b_right": [0, 0, 250, 0, 0, 0, 2300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  "description_right": ["EVAP COIL", "SPACE", "SPACE", "SPACE", "CONDENSER", "SPACE", "SPACE", "SPACE", "SPARE", "SPACE", "SPARE", "SPACE", "SPARE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE", "SPACE"]
}
```

Here is an updated version of a function to test at home:

private void PHASE_SUM_GRID_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      // Check if the modified cell is in row 0 and column 0 or 1
      if (e.RowIndex == 0 && (e.ColumnIndex == 0 || e.ColumnIndex == 1))
      {
        // Retrieve the values from dataGridView2, row 0, column 0 and 1
        object value1 = PHASE_SUM_GRID.Rows[0].Cells[0].Value;
        object value2 = PHASE_SUM_GRID.Rows[0].Cells[1].Value;

        // Perform the sum (checking for null values)
        double sum = 0;
        if (value1 != null)
        {
          sum += Convert.ToDouble(value1);
        }
        if (value2 != null)
        {
          sum += Convert.ToDouble(value2);
        }

        // Update total VA and panel load
        TOTAL_VA_GRID.Rows[0].Cells[0].Value = Math.Round(sum, 1); // Rounded to 1 decimal place
        PANEL_LOAD_GRID.Rows[0].Cells[0].Value = Math.Round(sum / 1000, 1); // Rounded to 1 decimal place

        // Update feeder amps
        double maxVal = 0;
        if (value1 != null && value2 != null)
        {
          maxVal = Math.Max(Convert.ToDouble(value1), Convert.ToDouble(value2));
        }
        else if (value1 != null)
        {
          maxVal = Convert.ToDouble(value1);
        }
        else if (value2 != null)
        {
          maxVal = Convert.ToDouble(value2);
        }

        object lineVoltageObj = LINE_VOLTAGE_COMBOBOX.SelectedItem;
        if (lineVoltageObj != null)
        {
          double lineVoltage = Convert.ToDouble(lineVoltageObj);
          if (lineVoltage != 0)
          {
            double panelLoadValue = maxVal / lineVoltage;
            FEEDER_AMP_GRID.Rows[0].Cells[0].Value = Math.Round(panelLoadValue, 1); // Rounded to 1 decimal place
          }
        }
      }
    }

Modify this function.
Check if this checkbox is checked: LARGEST_LCL_CHECKBOX.Checked
and check if this datagridview has a number value: TOTAL_OTHER_LOAD_GRID[0, 0].Value
If both these conditions are true, do the following:
1. Set TOTAL_VA_GRID.Rows[0].Cells[0].Value equal to Math.Round(sum, 0)
2. Leave panel load grid as PANEL_LOAD_GRID.Rows[0].Cells[0].Value = Math.Round((TOTAL_OTHER_LOAD_GRID[0, 0].Value + sum) / 1000, 1); // Rounded to 1 decimal place
3. Set FEEDER_AMP_GRID.Rows[0].Cells[0].Value equal to Math.Round(TOTAL_VA_GRID.Rows[0].Cells[0].Value / (120 * the number of columns in PHASE_SUM_GRID), 1)
If these conditions are false, calculate the total VA the same way, calculate PANEL_LOAD without the TOTAL_OTHER_LOAD_GRID[0, 0].Value value, and calculate feeder amps by finding the greater value between phase a and phase b and dividing it by LINE_VOLTAGE_COMBOBOX.SelectedItem.

Here are the missing keys in the panel data:

subtotal_a
subtotal_b
subtotal_c
total_va
lcl
total_other_load
kva
feeder_amps
description_left_highlights
description_right_highlights
breaker_left_highlights
breaker_right_highlights
description_left
phase_a_left
phase_b_left
breaker_left
circuit_left
circuit_right
breaker_right
phase_a_right
phase_b_right
description_right
