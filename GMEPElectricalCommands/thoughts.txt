Here is my function:

```
private void InsertBreakerNotes(Point3d startPoint, Dictionary<string, List<bool>> notesWithBools, bool left)
    {
      Point3d botPoint = new Point3d(0, 0, 0);
      Point3d topPoint = new Point3d(0, 0, 0);

      double header_height = 0.7488;
      double panel_width = 8.9856;
      double row_height = 0.1872;
      double start_x = startPoint.X + (left ? 0 : panel_width);
      double start_y = startPoint.Y - header_height;
      double displacement = left ? -1 : 1;

      bool currentlyKeeping = false;

      foreach (var note in notesWithBools)
      {
        for (int i = 0; i < note.Value.Count; i += 1)
        {
          if (note.Value[i])
          {
            if (!currentlyKeeping)
            {
              topPoint = new Point3d(start_x, start_y - (row_height * (i)), 0);
              currentlyKeeping = true;
            }
            if (i >= note.Value.Count - 1)
            {
              botPoint = new Point3d(start_x, start_y - (row_height * (i + 1)), 0);
              KeepBreakersGivenPoints(topPoint, botPoint, new Point3d(topPoint.X + displacement, topPoint.Y, 0), note.Key);
            }
          }
          else if (currentlyKeeping)
          {
            botPoint = new Point3d(start_x, start_y - (row_height * i), 0);
            currentlyKeeping = false;
            KeepBreakersGivenPoints(topPoint, botPoint, new Point3d(topPoint.X + displacement, topPoint.Y, 0), note.Key);
          }
        }
        currentlyKeeping = false;
        start_x += left ? -0.191 : 0.191;
      }
    }
```

I want to change the way it currently functions. The first note appears closest to the outer border of the panel. The second note appears slightly further away from the border of the panel. The third note appears slightly further away from the border of the panel, etc.

I want to keep the location that the first note is being placed, closest to the border of the panel.

For the subsequent notes, I want to place them as close to the border of the pannel as possible, but I want to make sure that the notes are not overlapping each other.

This means that all the first notes get placed and none of the notes are currently overlapping.

Then as the second note is being placed, there is a condition that checks if the first note was already placed for that breaker, if so, then place the note 0.191 units away.

It there is not a first note that was placed for that breaker, then place the second note 0 units away, the same distance as the first note.

As the third note is being placed, there should be a condition that checks if the first or second note was already placed for that breaker, if so then place the note 0.382 units away.

If there was a first note placed or a second note placed, then place the third note 0.191 units away.

If neither the first note nor the second note had been placed, then place the third note 0 units away, the same distance as the first note.



Here is some data that I will be working with:

```
{
  "1": [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    false
  ],
  "2": [
    false,
    false,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false
  ]
}
```

I need a function that goes through a Dictionary<string, List<bool>> and converts the boolean values to levels. Here is how it works.

The first string, List<bool> combo is for the first note, the boolean values apply to each breaker in the panel.

All the false values should be converted to 0, all the true values should be converted to 1 for the "1" string, List<bool> combo.

The second string, List<bool> combo is for the second note, the boolean values apply to each breaker in the panel.

All the false values should be converted to 0, the true values should be converted to 1 if the first note for that breaker was 0, and 2 if the first note for that breaker was 1.

The third string, List<bool> combo is for the third note, the boolean values apply to each breaker in the panel.

All the false values should be converted to 0, the true values should be converted to 1 if the first note and second note for that breaker was 0, and 2 if the first note or second note for that breaker was 1, and 3 if the first note was 1 and the second note was 2 for that breaker.